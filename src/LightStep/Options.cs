using System;
using System.Collections.Generic;
using System.Reflection;

namespace LightStep
{
    /// <summary>
    ///     Options for configuring the LightStep tracer.
    /// </summary>
    public class Options
    {
        /// <summary>
        ///     An identifier for the Tracer.
        /// </summary>
        public readonly ulong TracerGuid = new Random().NextUInt64();

        /// <summary>
        ///     Creates a new set of options for the LightStep tracer.
        /// </summary>
        /// <param name="token">Project API key.</param>
        /// <param name="satelliteOptions">Satellite endpoint configuration.</param>
        /// <exception cref="ArgumentNullException">An API key is required.</exception>
        public Options(string token, SatelliteOptions satelliteOptions)
        {
            if (string.IsNullOrWhiteSpace(token)) throw new ArgumentNullException(nameof(token));

            Tags = InitializeDefaultTags();
            ReportPeriod = TimeSpan.FromMilliseconds(5000);
            ReportTimeout = TimeSpan.FromSeconds(30);
            AccessToken = token;
            Satellite = satelliteOptions;
        }

        /// <summary>
        ///     API key for a LightStep project.
        /// </summary>
        public string AccessToken { get; set; }

        /// <summary>
        ///     LightStep Satellite endpoint configuration.
        /// </summary>
        public SatelliteOptions Satellite { get; set; }

        /// <summary>
        ///     How often the reporter will send spans to a LightStep Satellite.
        /// </summary>
        public TimeSpan ReportPeriod { get; set; }

        /// <summary>
        ///     Timeout for sending spans to a LightStep Satellite.
        /// </summary>
        public TimeSpan ReportTimeout { get; set; }

        /// <summary>
        ///     Tags that should be applied to each span generated by this tracer.
        /// </summary>
        public IDictionary<string, object> Tags { get; set; }

        private IDictionary<string, object> InitializeDefaultTags()
        {
            var attributes = new Dictionary<string, object>
            {
                [LightStepConstants.TracerPlatformKey] = LightStepConstants.TracerPlatformValue,
                [LightStepConstants.TracerPlatformVersionKey] = "0.2",
                [LightStepConstants.TracerVersionKey] = "0.2",
                [LightStepConstants.ComponentNameKey] = GetComponentName(),
                [LightStepConstants.HostnameKey] = GetHostName(),
                [LightStepConstants.CommandLineKey] = GetCommandLine()
            };
            return attributes;
        }

        private static string GetComponentName()
        {
            var compName = "";
#if NETSTANDARD1_3
            compName = Environment.GetEnvironmentVariable("LS_COMPONENT");
            #endif
#if NETSTANDARD2_0 || NET45
            compName = Assembly.GetEntryAssembly().GetName().Name;
#endif
            return compName;
        }


        private static string GetHostName()
        {
            var hostname = "";
#if NETSTANDARD1_3
            hostname = Environment.GetEnvironmentVariable("LS_HOSTNAME");
            #endif
#if NETSTANDARD2_0 || NET45
            hostname = Environment.MachineName;
#endif
            return hostname;
        }

        private static string GetCommandLine()
        {
            var commandLine = "";
#if NETSTANDARD1_3
            commandLine = Environment.GetEnvironmentVariable("LS_COMMANDLINE");
            #endif
#if NETSTANDARD2_0 || NET45
            commandLine = Environment.CommandLine;
#endif
            return commandLine;
        }
    }
}